#==============================================================================
# px4xplane (PixEagle) - Windows Makefile for MSYS2/MinGW
# X-Plane Plugin for PX4 SITL Integration
# Repository: alireza787b/px4xplane
# For use with MSYS2/MinGW-w64 environment on Windows
#==============================================================================

# Project Information
PROJECT_NAME := px4xplane
VERSION := 2.5.0

# Windows-specific settings
OS := windows
PLATFORM_DEFINE := -DIBM=1
SHARED_LIB_EXT := .xpl
OUTPUT_NAME := win.xpl

# Build Configuration (default: release)
CONFIG ?= release
BUILD_DIR := build/$(OS)/$(CONFIG)
OUTPUT_DIR := $(BUILD_DIR)

# Compiler Configuration for MinGW-w64
CXX := x86_64-w64-mingw32-g++

# Check if we're in MSYS2 environment
ifeq ($(MSYSTEM),MINGW64)
    CXX := g++
endif

# Standard Compiler Flags
CXXFLAGS_COMMON := -std=c++17 -Wall -Wextra -pedantic -Wno-extra-qualification
CXXFLAGS_COMMON += $(PLATFORM_DEFINE) -DWIN32 -D_WINDOWS -D_USRDLL
CXXFLAGS_COMMON += -DXPLM200=1 -DXPLM300=1 -DXPLM301=1 -DXPLM302=1 -DXPLM303=1 -DXPLM400=1
CXXFLAGS_COMMON += -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE
CXXFLAGS_COMMON += -DWINVER=0x0A00 -D_WIN32_WINNT=0x0A00

# Configuration-specific flags
ifeq ($(CONFIG),debug)
    CXXFLAGS_CONFIG := -g -O0 -DDEBUG -D_DEBUG
    $(info Building Windows DEBUG version with MinGW...)
else ifeq ($(CONFIG),release)
    CXXFLAGS_CONFIG := -O3 -DNDEBUG -DRELEASE
    $(info Building Windows RELEASE version with MinGW...)
else
    $(error Invalid configuration: $(CONFIG). Use 'debug' or 'release')
endif

# Combined compiler flags
CXXFLAGS := $(CXXFLAGS_COMMON) $(CXXFLAGS_CONFIG)

# Include Directories
INCLUDE_DIRS := \
    -Iinclude \
    -Ilib/SDK/CHeaders/XPLM \
    -Ilib/SDK/CHeaders/Widgets \
    -Ilib/mavlink/c_library_v2 \
    -Ilib/mavlink/c_library_v2/common \
    -Ilib/mavlink/c_library_v2/all \
    -Ilib/simpleini \
    -Ilib/Eigen \
    -Ilib/XYZgeomag/src \
    -Iconfig

# Windows-specific Library Configuration
LDFLAGS := -shared -static-libgcc -static-libstdc++
LDFLAGS += -Wl,--subsystem,console
LDFLAGS += -Llib/SDK/Libraries/Win

# Windows Libraries
LIBS := -lXPLM_64 -lXPWidgets_64 -lopengl32 -lws2_32

# Source Files (complete list)
SOURCES := \
    src/ConfigManager.cpp \
    src/configReader.cpp \
    src/ConnectionManager.cpp \
    src/DataRefManager.cpp \
    src/MAVLinkManager.cpp \
    src/px4xplane.cpp \
    src/TimeManager.cpp\
	src/UIHandler.cpp \
    src/UIConstants.cpp

# Object Files
OBJECTS := $(SOURCES:src/%.cpp=$(BUILD_DIR)/%.o)

# Dependencies
DEPS := $(OBJECTS:.o=.d)

# X-Plane plugin structure
PLUGIN_DIR := $(BUILD_DIR)/plugins/$(PROJECT_NAME)
TARGET := $(PLUGIN_DIR)/64/$(OUTPUT_NAME)
#==============================================================================
# Build Rules
#==============================================================================

.PHONY: all debug release clean distclean info help check-deps check-msys2

# Default target
all: check-msys2 check-deps $(TARGET)

# Debug build
debug:
	$(MAKE) CONFIG=debug

# Release build  
release:
	$(MAKE) CONFIG=release

# Check MSYS2 environment
check-msys2:
	@echo "Checking Windows build environment..."
ifeq ($(OS),Windows_NT)
    ifneq ($(MSYSTEM),MINGW64)
	    @echo "⚠️  Warning: Not running in MSYS2 MINGW64 environment"
	    @echo "   For best results, use MSYS2 MinGW-w64 shell"
	    @echo "   Download from: https://www.msys2.org/"
    else
	    @echo "✓ MSYS2 MINGW64 environment detected"
    endif
else
	@echo "❌ ERROR: This Makefile is for Windows only"
	@echo "   Use the main Makefile for macOS/Linux"
	@exit 1
endif

# Create build directory
$(BUILD_DIR):
	@echo "Creating build directory: $(BUILD_DIR)"
	@mkdir -p $(BUILD_DIR)

# Compile source files
$(BUILD_DIR)/%.o: src/%.cpp | $(BUILD_DIR)
	@echo "Compiling $< -> $@"
	$(CXX) $(CXXFLAGS) $(INCLUDE_DIRS) -MMD -MP -c $< -o $@

# Link the final plugin
$(TARGET): $(OBJECTS)
	@echo "Linking $(TARGET)"
	@mkdir -p $(dir $(TARGET))
	@mkdir -p $(PLUGIN_DIR)
	$(CXX) $(LDFLAGS) -o $@ $^ $(LIBS)
	@if [ -f "config/config.ini" ]; then \
		cp config/config.ini $(PLUGIN_DIR)/; \
		echo "✓ Configuration copied: $(PLUGIN_DIR)/config.ini"; \
	fi
	@echo "✓ Build completed: $(TARGET)"
	@echo "✓ Plugin ready for X-Plane: $(PLUGIN_DIR)/"

# Include dependency files
-include $(DEPS)

#==============================================================================
# Utility Targets
#==============================================================================

# Clean build files
clean:
	@echo "Cleaning build files..."
	@rm -rf build/
	@echo "✓ Clean completed"

# Complete clean (including any generated files)
distclean: clean
	@echo "Performing deep clean..."
	@find . -name "*.tmp" -delete 2>/dev/null || true
	@find . -name "*.bak" -delete 2>/dev/null || true
	@echo "✓ Deep clean completed"

# Display build information
info:
	@echo "=== Windows Build Information ==="
	@echo "Project: $(PROJECT_NAME) v$(VERSION)"
	@echo "OS: Windows (MinGW-w64)"
	@echo "Compiler: $(CXX)"
	@echo "Configuration: $(CONFIG)"
	@echo "Build Directory: $(BUILD_DIR)"
	@echo "Target: $(TARGET)"
	@echo "MSYS2 Environment: $(MSYSTEM)"
	@echo "=================================="

# Check dependencies and environment
check-deps:
	@echo "Checking build dependencies..."
	@if ! command -v $(CXX) >/dev/null 2>&1; then \
		echo "❌ ERROR: $(CXX) not found."; \
		echo "   Please install MinGW-w64 or use MSYS2"; \
		echo "   Download from: https://www.msys2.org/"; \
		exit 1; \
	fi
	@if [ ! -d "lib/SDK" ]; then \
		echo "❌ ERROR: X-Plane SDK not found in lib/SDK/"; \
		echo "   Please ensure the X-Plane SDK is properly installed."; \
		exit 1; \
	fi
	@if [ ! -d "lib/mavlink" ]; then \
		echo "❌ ERROR: MAVLink library not found in lib/mavlink/"; \
		echo "   Please run: git submodule update --init --recursive"; \
		exit 1; \
	fi
	@if [ ! -d "lib/simpleini" ]; then \
		echo "❌ ERROR: SimpleINI library not found in lib/simpleini/"; \
		echo "   Please run: git submodule update --init --recursive"; \
		exit 1; \
	fi
	@if [ ! -d "lib/Eigen" ]; then \
		echo "❌ ERROR: Eigen library not found in lib/Eigen/"; \
		echo "   Please ensure Eigen is installed in lib/Eigen/"; \
		exit 1; \
	fi
	@echo "✓ All dependencies found"

# Help target
help:
	@echo "=== px4xplane Windows Build System ==="
	@echo ""
	@echo "Available targets:"
	@echo "  all         - Build the plugin (default: release)"
	@echo "  debug       - Build debug version"
	@echo "  release     - Build release version"
	@echo "  clean       - Remove build files"
	@echo "  distclean   - Complete clean"
	@echo "  info        - Show build information"
	@echo "  check-deps  - Verify dependencies"
	@echo "  check-msys2 - Check MSYS2 environment"
	@echo "  help        - Show this help"
	@echo ""
	@echo "Usage examples:"
	@echo "  make                     # Build release version"
	@echo "  make debug               # Build debug version"
	@echo "  make clean               # Clean build files"
	@echo ""
	@echo "Environment setup:"
	@echo "  1. Install MSYS2 from https://www.msys2.org/"
	@echo "  2. Open 'MSYS2 MinGW 64-bit' terminal"
	@echo "  3. Install build tools:"
	@echo "     pacman -S mingw-w64-x86_64-gcc"
	@echo "     pacman -S mingw-w64-x86_64-make"
	@echo "  4. Run make from project directory"
	@echo ""
	@echo "======================================="

#==============================================================================
# Advanced Features
#==============================================================================

# Parallel build support
.PARALLEL:

# Keep intermediate files for debugging
.SECONDARY: $(OBJECTS)

# Prevent make from deleting targets if interrupted
.DELETE_ON_ERROR:

# Make sure these targets aren't treated as files
.PHONY: all debug release clean distclean info help check-deps check-msys2